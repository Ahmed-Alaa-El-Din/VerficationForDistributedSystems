(in-package :main)

(defparameter parsed-code '((setq x 12)
														(setq y 21)
														(if (= y 12)
																(setq y (* y 2))
																(setq x 42))
														(setq w 12)
														(+ 2 3)
														(setf z 22)
														(when (> x 20)
															(setq x (+ x 1)))
														(setq zz 18)
														(* 3 w)
														(unless (> y 30)
															(print "y = 21"))
														(square y)
														(* x 2)
														;; (unless (> y 30)
														;;	(print "y = 21"))
														))


(defun main (&optional (argv nil))
	(declare (ignore argv))
	(let* ((statements (construct-statement-vector parsed-code))
				 (basic-blocks (construct-basic-blocks statements)))
		(format t "~a~%~%~a~%~%" statements basic-blocks)
		(loop :for bb :in basic-blocks
			 :do (loop :for x :from (frst-stmt bb) :to (last-stmt bb)
							:do (format t "~a~%" (elt statements x)))
			 (format t "~%"))))
